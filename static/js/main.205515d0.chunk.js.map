{"version":3,"sources":["components/App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","blockNumber","difficulty","gasPrice","latestBlocks","web3","Web3","eth","getBlock","latestBlock","console","log","setState","number","getGasPrice","i","block","push","react_default","a","createElement","className","href","target","rel","role","style","width","scope","map","key","hash","substring","miner","timestamp","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.205515d0.chunk.js","sourcesContent":["// made thanks to https://youtu.be/XKxt6y_86lk?t=1818\r\nimport React, { Component } from 'react';\r\nimport Web3 from 'web3';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  async componentWillMount() {\r\n    // function will be called whenever the component mounts to the virtual dom in react (before render)\r\n    let web3 = new Web3('https://mainnet.infura.io/v3/b9b5b2d67af444b388cbed19e2261129')\r\n    //fetch latest block\r\n    let latestBlock = await web3.eth.getBlock('latest')\r\n    console.log('latest block', latestBlock)\r\n    this.setState({\r\n      blockNumber: latestBlock.number,\r\n      difficulty: latestBlock.difficulty\r\n    })\r\n    // fetch gasPrice\r\n    let gasPrice = await web3.eth.getGasPrice()\r\n    console.log('gasPrice', gasPrice)\r\n    this.setState({\r\n      gasPrice: gasPrice,\r\n    })\r\n\r\n    //fetch 10 blocks\r\n    let block\r\n    let latestBlocks = []\r\n    for (let i = 0; i < 10; i++) {\r\n      block = await web3.eth.getBlock(latestBlock.number - i)\r\n      latestBlocks.push(block)\r\n      console.log(block) \r\n    }\r\n    this.setState({\r\n      latestBlocks: latestBlocks\r\n    })\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { \r\n      blockNumber: 0, \r\n      difficulty: 0,\r\n      gasPrice: 0,\r\n      latestBlocks: [] \r\n    };\r\n    // this.handleChange = this.handleChange.bind(this);\r\n    // this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n  \r\n  render() {\r\n    return (\r\n      <div>\r\n        <nav className=\"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\">\r\n          <a\r\n            className=\"navbar-brand col-sm-3 col-md-2 mr-0\"\r\n            href=\"http://www.boober.org\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            Tippi Fifestarr: wingbird/webdev\r\n          </a>\r\n        </nav>\r\n        <div className=\"container-fluid mt-5\">\r\n          <div className=\"row\">\r\n            <main role=\"main\" className=\"col-lg-12 d-flex text-center\">\r\n              <div className=\"content mr-auto ml-auto\" style={{ width: '800px' }} >\r\n                <h5>blockchain: ethereum explorer</h5>\r\n\r\n              {/* yeah */}\r\n                <div className=\"row\">\r\n                  <div className=\"col-4\">\r\n                    <div className=\"bg-light pt-4 pb-3 m-1\">\r\n                      <h5>LATEST BL_CK</h5>\r\n                      <p> { this.state.blockNumber } </p>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"col-4\">\r\n                    <div className=\"bg-light pt-4 pb-3 m-1\">\r\n                      <h5>D__FICU_TY</h5>\r\n                      <p> { this.state.difficulty } </p>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"col-4\">\r\n                    <div className=\"bg-light pt-4 pb-3 m-1\">\r\n                      <h5>G_S PRICE</h5>\r\n                      <p> { this.state.gasPrice } </p>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              {/* new row */}\r\n              <div className=\"row\">\r\n                  <div className=\"col-lg-12 mt-3\">\r\n                    <div className=\"bg-light pt-4 pb-3 m-1\">\r\n                      <h5>LATEST BL_CK</h5>\r\n                      <p> { this.state.blockNumber } </p>\r\n                      <h4>next! x 10</h4>\r\n                    </div>\r\n                  {/* put a card here */}\r\n                  <div className=\"card-body\">\r\n                    <table className=\"table\">\r\n                      <thead>\r\n                        <tr>\r\n                          <th scope=\"col\">#</th>\r\n                          <th scope=\"col\">_ash</th>\r\n                          <th scope=\"col\">Min_r</th>\r\n                          <th scope=\"col\">Tim_st_mp</th>                         \r\n                        </tr>\r\n                      </thead>\r\n                      <tbody>\r\n\r\n                        { this.state.latestBlocks.map((block, key) => {\r\n                              return (\r\n                                <tr key={key} >\r\n                                  <th scope=\"row\">{block.number}</th>\r\n                                  <td>{block.hash.substring(0,21)}...{block.hash.substring(64,66)}</td>\r\n                                  <td>{block.miner.substring(0,21)}...</td>\r\n                                  <td>{block.timestamp}</td>\r\n                                </tr>\r\n                              )\r\n                            }) \r\n                        }\r\n                      </tbody>\r\n                    </table>\r\n\r\n                  </div>\r\n                  </div>\r\n                  \r\n                </div>\r\n\r\n              </div>\r\n            </main>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.css'\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}